#N canvas 487 28 941 801 12;
#X declare -lib Gem;
#X declare -path else;
#X obj 1 -123 declare -lib Gem;
#X obj 268 382 gemhead;
#X msg 311 -335 create;
#X obj 361 -256 gemwin;
#X msg 424 -338 1;
#X msg 459 -336 0;
#X obj 438 671 pix_multiimage;
#X floatatom 533 645 5 0 0 0 - - - 0;
#X obj 267 799 pix_texture;
#X obj 664 -261 netreceive -u -b;
#X obj 666 -186 oscparse;
#X obj 666 -141 list trim;
#X obj 671 46 route respiration;
#X obj 573 -395 loadbang;
#X obj 845 49 route heart;
#X obj 957 50 route skin;
#X obj 845 98 s heart;
#X obj 671 98 s respiration;
#X obj 957 100 s skin;
#X obj 266 275 loadbang;
#X obj 472 852 r respiration;
#X obj 351 1108 r heart;
#X floatatom 354 1199 5 0 0 0 - - - 0;
#X obj 330 1042 colorRGB 1 1 1 1;
#X floatatom 376 818 5 0 0 0 - - - 0;
#X obj 375 790 r skin;
#X floatatom 470 877 5 0 0 0 - - - 0;
#X obj 470 915 * 1;
#X obj -13 -148 declare -path else;
#X obj 352 1160 * 3;
#X floatatom 1159 229 6 0 0 0 - - - 0;
#X floatatom 1290 231 7 0 0 0 - - - 0;
#X floatatom 1408 229 7 0 0 0 - - - 0;
#X floatatom 1524 230 5 0 0 0 - - - 0;
#X obj 1159 255 s delta;
#X obj 1290 256 s theta;
#X obj 1408 254 s alpha;
#X obj 1524 255 s beta;
#X msg 661 -348 listen 12345;
#X obj 1096 91 list split 3;
#X obj 1159 203 list split 1;
#X obj 1290 204 list split 1;
#X obj 1408 204 list split 1;
#X obj 1524 204 list split 1;
#X floatatom 1635 228 5 0 0 0 - - - 0;
#X obj 1635 203 list split 1;
#X obj 1635 252 s gamma;
#X obj 1269 469 t b f;
#X floatatom 1269 531 5 0 0 0 - - - 0;
#X obj 1269 504 expr if ($f2 >= 5 \, 1 \, 0);
#X text 824 125 send heart;
#X text 937 125 send skin;
#X text 1093 62 From here on down \, these are the brain waves;
#X text 522 928 The *1 object under respiration must control opacity?;
#X text 460 1032 manipulation object: colorRGB 1 = gemlist \, 2 = red \, 3 = green \, 4 = blue \, 5 = alpha;
#X text 576 847 recieve respiration - on the hot inlet;
#X text 534 713 pix object: apply texture mapping uses the image as a texture on a geo 1 = gemlist \, and other messages;
#X text 411 1107 receive heart on hot inlet;
#X text 430 1231 geometric object: renders a sphere Inlet 1 = gemlist \, message: draw (line \, fill \, point) Inlet 2 = float: size Inlet 3: int: number of segments;
#X text 387 1156 Heart value x 3 enters 2nd inlet to affect the size of the sphere.;
#X text 643 -399 starts patch running on start up.;
#X text 238 250 starts path running on start up;
#X text 185 323 connects objects to the gem window;
#X text 42 -335 creates the gemwindow for the image;
#X text 198 -233 gemwindow where images appear;
#X text 675 15 Route = checks for argument and fetches corresponding data;
#X text 1076 279 sending delta waves;
#X text 1311 159 Nothing is currently receiving theta \, alpha \, beta or gamma waves.;
#X text 1467 -6 What is the blink? Is this referring to eyes blinking with the EEG? or is it a specific function?;
#X text 548 669 Inlet 1 = gemlist \, file \; inlet 2 = select image from integer;
#X text 426 783 receive skin on the cold inlet that controls red vs cyan;
#X text 468 960 If respiration controls opacity \, why is using the green and blue inlets instead of the alpha inlet?;
#X text 1451 -147 This takes the OSC packets and converts them into PD messages. OSC is sound control... why are the sensors sending data in OSC instead of binary? Wouldn't binary slip packets have less latency and be more reactive in real time?;
#X text 526 882 It appears that both skin and respiration are controlling colour on the RGB inlets.;
#X text 773 -354 Listen to port #12345 (this is the default port in the open BCI software \, and is used in arduino for biosynth as well);
#X text 1015 -266 -b = binary;
#X text 801 -280 recieve from network:;
#X text 806 -265 -u = udp (internet protocol);
#X text 801 -246 netreceive ouputs an osc list;
#X text 751 -183 OSC parse takes in an OSC list and outputs a pd message list;
#X text 751 -137 list trim splits the message list into individual messages.;
#X text 131 -148 -else is a pure data library;
#X text 132 -121 -gem is a pure data gem library;
#X text 1454 -72 OSC is stable and is really good at maintaining mapping. JJM found that binary would drop some data and not be able to parse correctly.Open BCI outputs OSC.;
#X text 1193 81 Open BCI ouputs 1 OSC packet of 3 lists of the five brainwaves at a time. list split divides packet into the three lists of 5 bands.;
#X text 970 229 float value from Open BCI;
#X text 663 479 To connect another library \, copy this section \, and then replace the library \, and use a float from a different source for the pix-multiimage;
#X text 665 522 * in the open images message refers to a variable in the file name.;
#X text 820 1234 this is expecting a 3D object - to do a flat rectangle \, I might need to map it onto a plane - google how to display an image in gem.;
#X text 524 258 Any time you see multiplication of signals think about scalers;
#X text 522 317 respiration affects skin.;
#X text 897 1043 couldn't get the alpha channel to work;
#X text 482 196 used Erin's nonnormative approach - all values are between 0 and 1;
#X text 428 810 Arduino has normalized the values to a float value between 0 and 1;
#X text 405 1201 Heart generates a float between 0 and 3;
#X text 1271 -366 ** Modifications to make;
#X text 1271 -345 ** Draw from two libraries. planets and bodies;
#X text 1271 -325 ** trigger images randomly from each library;
#X text 1272 -301 ** change sphere to flat image plane;
#X text 1274 -260 ** respiration: opacity of image - never goes below 50%;
#X text 1277 -202 ** Blink: selects planet images;
#X text 1276 -240 ** skin selects body images (but not one image per beat maybe 1 per 12 or something.;
#X text 1272 -279 ** heart: Red of planet and Green of Body;
#X obj 333 1240 rectangle;
#X obj 533 593 random 5;
#X msg 435 495 open ../images/planets*.jpg 5;
#X obj 533 619 int;
#X text 663 462 This connects to a single library of jpg images.;
#X text 1264 407 Detecting the blink without Python (requires less setup);
#X text 1339 462 trigger bang float float value is the raw Delta wave amplitude;
#X obj 1269 443 r delta;
#X text 1314 523 If the float value >= 5 then it outputs a 1 (blink detected) if the value is < 5 \, then it outputs a 0 (no blink), f 61;
#X text 446 -302 1 starts the animation 0 stops the animation;
#X floatatom 671 72 5 0 0 0 - - - 0;
#X floatatom 845 75 5 0 0 0 - - - 0;
#X floatatom 957 76 5 0 0 0 - - - 0;
#X text 476 71 values between 0 and 1;
#X obj 1269 560 select 1;
#X text 1334 560 send bang on outlet 1 if the value is 1;
#X obj 1269 590 s blink_bang;
#X obj 533 565 r blink_bang;
#X text 603 607 random number between 0 and 4 when a bang is sent to random inlet 1;
#X obj -55 677 pix_multiimage;
#X msg -54 500 open ../images/body*.jpg 9;
#X text 3 480 BODY image library;
#X text 500 471 PLANET image library;
#X obj 40 571 r skin;
#X obj 40 598 * 12;
#X obj 40 624 int;
#X floatatom 40 649 5 0 0 0 - - - 0;
#X obj -55 708 pix_texture;
#X obj -55 738 s body_image;
#X text 650 122 s = send send respiration;
#X msg 268 352 1;
#X msg 314 352 0;
#X text 93 597 maps skin value (0.0 - 1.0) to an integer between 0 and 11;
#X connect 1 0 6 0;
#X connect 2 0 3 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 6 0 8 0;
#X connect 7 0 6 1;
#X connect 8 0 23 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 12 0 113 0;
#X connect 12 1 14 0;
#X connect 13 0 38 0;
#X connect 13 0 2 0;
#X connect 13 0 4 0;
#X connect 14 0 114 0;
#X connect 14 1 15 0;
#X connect 15 0 115 0;
#X connect 15 1 39 0;
#X connect 19 0 105 0;
#X connect 19 0 133 0;
#X connect 20 0 26 0;
#X connect 21 0 29 0;
#X connect 22 0 103 1;
#X connect 22 0 103 2;
#X connect 23 0 103 0;
#X connect 24 0 23 1;
#X connect 25 0 24 0;
#X connect 26 0 27 0;
#X connect 27 0 23 2;
#X connect 27 0 23 3;
#X connect 29 0 22 0;
#X connect 30 0 34 0;
#X connect 31 0 35 0;
#X connect 32 0 36 0;
#X connect 33 0 37 0;
#X connect 38 0 9 0;
#X connect 39 1 40 0;
#X connect 40 0 30 0;
#X connect 40 1 41 0;
#X connect 41 0 31 0;
#X connect 41 1 42 0;
#X connect 42 0 32 0;
#X connect 42 1 43 0;
#X connect 43 0 33 0;
#X connect 43 1 45 0;
#X connect 44 0 46 0;
#X connect 45 0 44 0;
#X connect 47 0 49 0;
#X connect 47 1 49 1;
#X connect 48 0 117 0;
#X connect 49 0 48 0;
#X connect 104 0 106 0;
#X connect 105 0 6 0;
#X connect 106 0 7 0;
#X connect 110 0 47 0;
#X connect 113 0 17 0;
#X connect 114 0 16 0;
#X connect 115 0 18 0;
#X connect 117 0 119 0;
#X connect 120 0 104 0;
#X connect 122 0 130 0;
#X connect 123 0 122 0;
#X connect 126 0 127 0;
#X connect 127 0 128 0;
#X connect 128 0 129 0;
#X connect 129 0 122 1;
#X connect 130 0 131 0;
#X connect 133 0 1 0;
#X connect 134 0 1 0;
